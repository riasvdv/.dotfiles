[alias]
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"f() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; f"

	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Custom graph log (append any tree-ish)
	gr = log --pretty=nice --date-order --graph

	# Custom graph log for all branches
	gra = log --pretty=nice --date-order --graph --all

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# Push changes to origin/master by default
	p = !bash -c 'git push ${1-origin} ${2-master}' -

	# Push changes to origin by default
	po = !bash -c 'git push origin ${1-master}' -

	# Checkout latest changes
	pr = !bash -c 'git pull --rebase ${1-origin} ${2-master}' -

	# Checkout pull request
	pre = "!f() { git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!f() { git rebase -i HEAD~$1; }; f"

	# Rebase actions
	reba = rebase --abort
	rebc = rebase --continue
	rebs = rebase --skip

	# See recent branches worked in
	recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!f() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; f"

	# View the current working tree status using the short format
	s = status -s

	# Sneak changes into your previous commit
	sneak = "!f() { git commit -a --amend --no-edit; }; f"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
	interactive = auto

[diff]
	renames = copies

[difftool]
	prompt = false

[push]
	default = simple

[pretty]
	nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"

[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"
